
Find duplicates within a range k in an array. Given an array and a positive number k, 
check whether the array contains any duplicate elements within the range k.If k is more than the array's size,
 the solution should check for duplicates in the complete array.


import java.io.*;
import java.util.*;

public class Solution {
    public static boolean hasDuplicate(int[] nums, int k)
    {
        // stores (element, index) pairs as (key, value) pairs
        Map<Integer, Integer> map = new HashMap<>();
 
        // traverse the array
        for (int i = 0; i < nums.length; i++)
        {
            // if the current element already exists in the map
            if (map.containsKey(nums[i]))
            {
                // return true if the current element repeats within range of `k`
                if (i - map.get(nums[i]) <= k) {
                    return true;
                }
            }
 
            // store elements along with their indices
            map.put(nums[i], i);
        }
 
        // we reach here when no element repeats within range `k`
        return false;
    }
 

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        int[] nums = { 5, 6, 8, 2, 4, 6, 9 };
        int k = 4;
 
        if (hasDuplicate(nums, k)) {
            System.out.println("Duplicates found");
        }
        else {
            System.out.println("No duplicates were found");
        }
    }
    
}

=======================================================================================================================================================
Find the smallest missing element from a sorted array Given a sorted array of distinct non-negative integers,
 find the smallest missing element in it.



import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
       
       /* Scanner sr = new Scanner(System.in);
        int n = sr.nextInt();
        int m = sr.nextInt();*/
        int arr[] ={0,1,2,6,9,11,15};
    
        int temp=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]>i)
            {
              System.out.println("The smallest missing element is "+i);
              break;
            }
        }
        
    }
========================================================================================================================================================
Bubble sort is a stable, in place srting algorithm named for smaller or larger elements "bubble" to the top of the list.
 Although the algorithm is simple, it is too slow and impractical for most problems even comparred to insertion sort,
 and is not recommended for large input.


import java.io.*;
import java.util.*;

public class Solution {
void bubbleSort(int arr[])
    {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (arr[j] > arr[j + 1]) {
                   
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
    }
 

    public static void main(String[] args) {
         Solution ob = new Solution();
        int arr[] = {3, 5, 8, 4, 1, 9, -2 };
        ob.bubbleSort(arr);
        System.out.println(Arrays.toString(arr));
     
    }
}

============================================================================================================================================

This is an to practice traversing a linked list. Given a pointer to the head node of a linked list, print each node's  element, one per line. 
If the head pointer is null (indicating the list is empty), there is nothing to print.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList() {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) {
            SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
            }

            this.tail = node;
        }
    }
 static void printLinkedList(SinglyLinkedListNode head) {
        SinglyLinkedListNode temp=head;
        while (temp!=null){
            System.out.println(temp.data);
            temp=temp.next;
        }

    }
 private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        SinglyLinkedList llist = new SinglyLinkedList();

        int llistCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < llistCount; i++) {
            int llistItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            llist.insertNode(llistItem);
        }

        printLinkedList(llist.head);

        scanner.close();
    }
}


=====================================================================================================================================
Given a pointer to the head of a linked list, insert a new node before the head.
 The  value in the new node should point to  and the  value should be replaced with a given value.
 Return a reference to the new head of the list. The head pointer given may be null meaning that the initial list is empty.

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList() {
            this.head = null;
            this.tail = null;
        }

      
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }
 static SinglyLinkedListNode insertNodeAtHead(SinglyLinkedListNode llist, int data) {
        
         SinglyLinkedListNode temp=new SinglyLinkedListNode(data);
        if(llist == null){
            llist = new SinglyLinkedListNode(data);
            return llist;
        }
        temp.next = llist;
        llist = temp;
        return llist;
        

    }
 private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        SinglyLinkedList llist = new SinglyLinkedList();

        int llistCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < llistCount; i++) {
            int llistItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        	
          SinglyLinkedListNode llist_head = insertNodeAtHead(llist.head, llistItem);

          llist.head = llist_head;
        }



        printSinglyLinkedList(llist.head, "\n", bufferedWriter);
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}


======================================================================================================================================

Insert a Node at the Tail of a Linked List


You are given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer.
 Insert this node at the tail of the linked list and return the head node of the linked list formed after inserting this new node. 
The given head pointer may be null, meaning that the initial list is empty.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;

        public SinglyLinkedList() {
            this.head = null;
        }

      
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }
 static SinglyLinkedListNode insertNodeAtTail(SinglyLinkedListNode head, int data) {
        //SinglyLinkedListNode new_node=new SinglyLinkedListNode(data);
        if (head==null){
            head=new SinglyLinkedListNode(data);
            return head;
        }
        SinglyLinkedListNode temp=head;
           while(temp.next!=null){
               temp=temp.next;
           } 
        temp.next=new SinglyLinkedListNode(data);
        
        return head;

    }

private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        SinglyLinkedList llist = new SinglyLinkedList();

        int llistCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < llistCount; i++) {
            int llistItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
        	
          SinglyLinkedListNode llist_head = insertNodeAtTail(llist.head, llistItem);

          llist.head = llist_head;
        }



        printSinglyLinkedList(llist.head, "\n", bufferedWriter);
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}

======================================================================================================================================================
Delete duplicate-value nodes from a sorted linked list


You are given the pointer to the head node of a sorted linked list, where the data in the nodes is in ascending order.
 Delete nodes and return a sorted list with each distinct value in the original list. The given head pointer may be null indicating that the list is empty.


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList() {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) {
            SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
            }

            this.tail = node;
        }
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }

public static SinglyLinkedListNode removeDuplicates(SinglyLinkedListNode llist) {
    
    SinglyLinkedListNode temp = llist;
        
        while(temp.next!=null)
        {
            if(temp.data == temp.next.data)
            {
                
                     temp.next = temp.next.next;
            }
               else
               {
                  temp = temp.next;
               }    
        }      
        return llist;
}


class Result{
    
    
}
private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            SinglyLinkedList llist = new SinglyLinkedList();

            int llistCount = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int i = 0; i < llistCount; i++) {
                int llistItem = scanner.nextInt();
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                llist.insertNode(llistItem);
            }

            SinglyLinkedListNode llist1 = removeDuplicates(llist.head);

            printSinglyLinkedList(llist1, " ", bufferedWriter);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
===========================================================================================

Merge two sorted linked lists


Given pointers to the heads of two sorted linked lists, merge them into a single, sorted linked list.
 Either head pointer may be null meaning that the corresponding list is empty.



static SinglyLinkedListNode mergeLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
            if(head1==null) {
            return head2; 
        } 
        if(head2 == null) {
            return head1;
        }
       SinglyLinkedListNode t1 = head1, t2 = head2; 
       SinglyLinkedListNode head = null, tail = null;  
       if(t1.data<=t2.data) {
           head = t1; 
           tail = t1; 
           t1= t1.next;
       } else {
           head = t2; 
           tail = t2; 
           t2 =  t2.next;
       } 
       while(t1!=null && t2!=null) { 
           if(t1.data<=t2.data) {
               tail.next = t1;  
               tail = t1;
               t1 = t1.next; 
           } else {
               tail.next = t2;  
               tail = t2;
               t2 = t2.next;
           }

       } 
       if(t1!=null) {
           tail.next = t1; 
       } else {
           tail.next = t2; 
       } 
       return head; 
    


    }
======================================================================================
Find Merge Point of Two Lists

Given pointers to the head nodes of  linked lists that merge together at some point,
 find the node where the two lists merge. The merge point is where both lists point to the same node,
 i.e. they reference the same memory location. It is guaranteed that the two head nodes will be different,
 and neither will be NULL. If the lists share a common node, return that node's  value.




  static int findMergeNode(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
        SinglyLinkedListNode temp1=head1;
    SinglyLinkedListNode temp2=head2;
    List<SinglyLinkedListNode>list=new ArrayList<SinglyLinkedListNode>();
    while(temp1!=null){
        list.add(temp1);
        temp1=temp1.next;            
    }
    while(temp2!=null){
        if(list.contains(temp2)){
            break;
        }
        temp2=temp2.next;
    }
    return temp2.data;

    }



=========================================================================================================

Print in Reverse


Given a pointer to the head of a singly-linked list, print each  value from the reversed list.
 If the given list is empty, do not print anything.




    public static void reversePrint(SinglyLinkedListNode llist) {
    // Write your code here
        
          if(llist.next != null) {
            reversePrint(llist.next);
        }
        System.out.println(llist.data);


}


=========================================================================================================

queue using linked list



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    QNode front, rear;
    
    static class QNode {
        int key;
        QNode next;

        // constructor to create a new linked list node
        public QNode(int key)
        {
            this.key = key;
            this.next = null;
        }
    }
    public Solution()
    {
        this.front = this.rear = null;
    }

    // Method to add an key to the queue.
    void Insert(int key)
    {   
        QNode temp = new QNode(key);

             if (this.rear == null) {
            this.front = this.rear = temp;
            return;
        }
        this.rear.next = temp;
        this.rear = temp;
    }

   
    void Delete()
    {
      
        if (this.front == null)
            System.out.println("Queue is empty");
   
        QNode temp = this.front;
        if(temp!=null)
        this.front = this.front.next;
        else if (this.front == null)
            this.rear = null;
    }
    
    void Display()
    {    
        if (this.front == null )
            System.out.print("NULL");
        QNode temp= front;
        while(temp!=null)
        {
        System.out.print("->"+temp.key);
        temp=temp.next;
        }
        System.out.println("");
    }    
    
    void Exit(){
        
     System.exit(0);
    }
    
    public static void main(String[] args)
    {
        Solution S = new Solution();
        Scanner sc1=new Scanner(System.in);
        while(true)
        {    
        int choice= sc1.nextInt();        
        switch(choice)
        {
        case 1:
        int key=sc1.nextInt();
        S.Insert(key);
        break;
        
        case 2:
        S.Delete();
        break;
        
        case 3:
        S.Display();
        break;
        
        case 4:
        S.Exit();
        break;
        }
        }
}
}


=======================================================
==============================================================

Tree: Height of a Binary Tree


The height of a binary tree is the number of edges between the tree's root and its furthest leaf.
 For example, the following binary tree is of height :

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

public static int height(Node root) {
      	//int height(Node root){
       if (root == null){
           return -1;
       }
       else{
           return 1+Math.max(height(root.left), height(root.right));
    }
   }
   
public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        int height = height(root);
        System.out.println(height);
    }	
}










